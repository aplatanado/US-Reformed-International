// Generated by KLFC 1.5.6
// https://github.com/39aldo39/klfc

default
xkb_symbols "basic" {
    key.type[Group1] = "NONE_SHIFT_CONTROL_ALTGR_SHIFT+ALTGR";
    key <TLDE> { [        grave,   asciitilde,   VoidSymbol,   dead_grave,   dead_tilde ] };
    key <AE01> { [            1,       exclam,   VoidSymbol,   exclamdown,  onesuperior ] };
    key <AE02> { [            2,           at,   VoidSymbol,  twosuperior, dead_doubleacute ] };
    key.type[Group1] = "NONE_SHIFT_CONTROL_ALTGR";
    key <AE03> { [            3,   numbersign,   VoidSymbol, threesuperior ] };
    key.type[Group1] = "NONE_SHIFT_CONTROL_ALTGR_SHIFT+ALTGR";
    key <AE04> { [            4,       dollar,   VoidSymbol,     sterling, dead_currency ] };
    key <AE05> { [            5,      percent,   VoidSymbol,     EuroSign,   dead_caron ] };
    key <AE06> { [            6,  asciicircum,   VoidSymbol,   onequarter, dead_circumflex ] };
    key <AE07> { [            7,    ampersand,   VoidSymbol,      onehalf, dead_cedilla ] };
    key <AE08> { [            8,     asterisk,   VoidSymbol, threequarters,  dead_ogonek ] };
    key <AE09> { [            9,    parenleft,   VoidSymbol, leftsinglequotemark,   dead_breve ] };
    key <AE10> { [            0,   parenright,   VoidSymbol, rightsinglequotemark, dead_abovering ] };
    key <AE11> { [        minus,   underscore,   VoidSymbol,          yen,  dead_macron ] };
    key <AE12> { [        equal,         plus,   VoidSymbol,     multiply,     division ] };
    key.type[Group1] = "NONE_SHIFT_CONTROL_ALTGR_SHIFT+ALTGR_ALPHABETIC";
    key <AD01> { [            q,            Q,   VoidSymbol,   adiaeresis,   Adiaeresis ] };
    key <AD02> { [            w,            W,   VoidSymbol,        aring,        Aring ] };
    key <AD03> { [            e,            E,   VoidSymbol,       eacute,       Eacute ] };
    key <AD04> { [            r,            R,   VoidSymbol,   registered,    trademark ] };
    key <AD05> { [            t,            T,   VoidSymbol,        thorn,        THORN ] };
    key <AD06> { [            y,            Y,   VoidSymbol,   udiaeresis,   Udiaeresis ] };
    key <AD07> { [            u,            U,   VoidSymbol,       uacute,       Uacute ] };
    key <AD08> { [            i,            I,   VoidSymbol,       iacute,       Iacute ] };
    key <AD09> { [            o,            O,   VoidSymbol,       oacute,       Oacute ] };
    key <AD10> { [            p,            P,   VoidSymbol,       oslash,       Oslash ] };
    key.type[Group1] = "NONE_SHIFT_CONTROL_ALTGR_SHIFT+ALTGR";
    key <AD11> { [  bracketleft,    braceleft,        U001B, guillemotleft, leftdoublequotemark ] };
    key <AD12> { [ bracketright,   braceright,        U001D, guillemotright, rightdoublequotemark ] };
    key <BKSL> { [    backslash,          bar,        U001C,      notsign,    brokenbar ] };
    key.type[Group1] = "NONE_SHIFT_CONTROL_ALTGR_SHIFT+ALTGR_ALPHABETIC";
    key <AC01> { [            a,            A,   VoidSymbol,       aacute,       Aacute ] };
    key <AC02> { [            s,            S,   VoidSymbol,       ssharp,      section ] };
    key <AC03> { [            d,            D,   VoidSymbol,          eth,          ETH ] };
    key.type[Group1] = "ALPHABETIC";
    key <AC04> { [            f,            F ] };
    key <AC05> { [            g,            G ] };
    key <AC06> { [            h,            H ] };
    key <AC07> { [            j,            J ] };
    key.type[Group1] = "NONE_SHIFT_CONTROL_ALTGR_SHIFT+ALTGR_ALPHABETIC";
    key <AC08> { [            k,            K,   VoidSymbol,           oe,           OE ] };
    key <AC09> { [            l,            L,   VoidSymbol,      lstroke,      Lstroke ] };
    key.type[Group1] = "NONE_SHIFT_CONTROL_ALTGR_SHIFT+ALTGR";
    key <AC10> { [    semicolon,        colon,   VoidSymbol,    paragraph,       degree ] };
    key <AC11> { [   apostrophe,     quotedbl,   VoidSymbol,   dead_acute, dead_diaeresis ] };
    key.type[Group1] = "NONE_SHIFT_CONTROL_ALTGR_SHIFT+ALTGR_ALPHABETIC";
    key <AB01> { [            z,            Z,   VoidSymbol,           ae,           AE ] };
    key.type[Group1] = "ALPHABETIC";
    key <AB02> { [            x,            X ] };
    key.type[Group1] = "NONE_SHIFT_CONTROL_ALTGR_SHIFT+ALTGR_ALPHABETIC";
    key <AB03> { [            c,            C,   VoidSymbol,    copyright,         cent ] };
    key.type[Group1] = "ALPHABETIC";
    key <AB04> { [            v,            V ] };
    key <AB05> { [            b,            B ] };
    key.type[Group1] = "NONE_SHIFT_CONTROL_ALTGR_SHIFT+ALTGR_ALPHABETIC";
    key <AB06> { [            n,            N,   VoidSymbol,       ntilde,       Ntilde ] };
    key.type[Group1] = "NONE_SHIFT_CONTROL_ALTGR_ALPHABETIC";
    key <AB07> { [            m,            M,   VoidSymbol,           mu ] };
    key.type[Group1] = "NONE_SHIFT_CONTROL_ALTGR_SHIFT+ALTGR";
    key <AB08> { [        comma,         less,   VoidSymbol,     ccedilla,     Ccedilla ] };
    key <AB09> { [       period,      greater,   VoidSymbol, dead_belowdot, dead_abovedot ] };
    key <AB10> { [        slash,     question,   VoidSymbol, questiondown,  dead_stroke ] };
    key <SPCE> { [        space,        space,        space, nobreakspace,        U200B ] };
    key.type[Group1] = "ONE_LEVEL";
    key <LSGT> { [      Shift_L ],
                 actions[Group1] = [ SetMods(mods=Shift) ] };
    include "level3(ralt_switch)"
};
